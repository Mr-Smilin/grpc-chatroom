/**
 * @fileoverview gRPC-Web generated client stub for com.chatroom.chatroom
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: chatroom.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.com = {};
proto.com.chatroom = {};
proto.com.chatroom.chatroom = require('./chatroom_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.chatroom.chatroom.ChatroomServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.chatroom.chatroom.ChatroomServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.chatroom.chatroom.ChatRequest,
 *   !proto.com.chatroom.chatroom.ChatReply>}
 */
const methodDescriptor_ChatroomService_streamChatList = new grpc.web.MethodDescriptor(
  '/com.chatroom.chatroom.ChatroomService/streamChatList',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.com.chatroom.chatroom.ChatRequest,
  proto.com.chatroom.chatroom.ChatReply,
  /**
   * @param {!proto.com.chatroom.chatroom.ChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.chatroom.chatroom.ChatReply.deserializeBinary
);


/**
 * @param {!proto.com.chatroom.chatroom.ChatRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.com.chatroom.chatroom.ChatReply>}
 *     The XHR Node Readable Stream
 */
proto.com.chatroom.chatroom.ChatroomServiceClient.prototype.streamChatList =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/streamChatList',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_streamChatList);
};


/**
 * @param {!proto.com.chatroom.chatroom.ChatRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.com.chatroom.chatroom.ChatReply>}
 *     The XHR Node Readable Stream
 */
proto.com.chatroom.chatroom.ChatroomServicePromiseClient.prototype.streamChatList =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/streamChatList',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_streamChatList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.chatroom.chatroom.RoomRequest,
 *   !proto.com.chatroom.chatroom.Empty>}
 */
const methodDescriptor_ChatroomService_sendMessage = new grpc.web.MethodDescriptor(
  '/com.chatroom.chatroom.ChatroomService/sendMessage',
  grpc.web.MethodType.UNARY,
  proto.com.chatroom.chatroom.RoomRequest,
  proto.com.chatroom.chatroom.Empty,
  /**
   * @param {!proto.com.chatroom.chatroom.RoomRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.chatroom.chatroom.Empty.deserializeBinary
);


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.chatroom.chatroom.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.chatroom.chatroom.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.chatroom.chatroom.ChatroomServiceClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/sendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_sendMessage,
      callback);
};


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.chatroom.chatroom.Empty>}
 *     Promise that resolves to the response
 */
proto.com.chatroom.chatroom.ChatroomServicePromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/sendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_sendMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.chatroom.chatroom.RoomRequest,
 *   !proto.com.chatroom.chatroom.RoomReply>}
 */
const methodDescriptor_ChatroomService_streamRoom = new grpc.web.MethodDescriptor(
  '/com.chatroom.chatroom.ChatroomService/streamRoom',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.com.chatroom.chatroom.RoomRequest,
  proto.com.chatroom.chatroom.RoomReply,
  /**
   * @param {!proto.com.chatroom.chatroom.RoomRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.chatroom.chatroom.RoomReply.deserializeBinary
);


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.com.chatroom.chatroom.RoomReply>}
 *     The XHR Node Readable Stream
 */
proto.com.chatroom.chatroom.ChatroomServiceClient.prototype.streamRoom =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/streamRoom',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_streamRoom);
};


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.com.chatroom.chatroom.RoomReply>}
 *     The XHR Node Readable Stream
 */
proto.com.chatroom.chatroom.ChatroomServicePromiseClient.prototype.streamRoom =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/streamRoom',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_streamRoom);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.chatroom.chatroom.RoomRequest,
 *   !proto.com.chatroom.chatroom.Empty>}
 */
const methodDescriptor_ChatroomService_leaveRoom = new grpc.web.MethodDescriptor(
  '/com.chatroom.chatroom.ChatroomService/leaveRoom',
  grpc.web.MethodType.UNARY,
  proto.com.chatroom.chatroom.RoomRequest,
  proto.com.chatroom.chatroom.Empty,
  /**
   * @param {!proto.com.chatroom.chatroom.RoomRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.chatroom.chatroom.Empty.deserializeBinary
);


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.chatroom.chatroom.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.chatroom.chatroom.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.chatroom.chatroom.ChatroomServiceClient.prototype.leaveRoom =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/leaveRoom',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_leaveRoom,
      callback);
};


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.chatroom.chatroom.Empty>}
 *     Promise that resolves to the response
 */
proto.com.chatroom.chatroom.ChatroomServicePromiseClient.prototype.leaveRoom =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/leaveRoom',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_leaveRoom);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.chatroom.chatroom.RoomRequest,
 *   !proto.com.chatroom.chatroom.Empty>}
 */
const methodDescriptor_ChatroomService_deleteRoom = new grpc.web.MethodDescriptor(
  '/com.chatroom.chatroom.ChatroomService/deleteRoom',
  grpc.web.MethodType.UNARY,
  proto.com.chatroom.chatroom.RoomRequest,
  proto.com.chatroom.chatroom.Empty,
  /**
   * @param {!proto.com.chatroom.chatroom.RoomRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.chatroom.chatroom.Empty.deserializeBinary
);


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.chatroom.chatroom.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.chatroom.chatroom.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.chatroom.chatroom.ChatroomServiceClient.prototype.deleteRoom =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/deleteRoom',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_deleteRoom,
      callback);
};


/**
 * @param {!proto.com.chatroom.chatroom.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.chatroom.chatroom.Empty>}
 *     Promise that resolves to the response
 */
proto.com.chatroom.chatroom.ChatroomServicePromiseClient.prototype.deleteRoom =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.chatroom.chatroom.ChatroomService/deleteRoom',
      request,
      metadata || {},
      methodDescriptor_ChatroomService_deleteRoom);
};


module.exports = proto.com.chatroom.chatroom;

